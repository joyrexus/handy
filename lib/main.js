// Generated by CoffeeScript 1.6.2
/*
handy - record and view motion capture samples.

USAGE

  handy --record NUMBER_OF_FRAMES [FILENAME]
  handy FILENAME

  handy -r 1000                # stream 1000 frames to stdout 
  handy -r 1000 sample.json    # stream 1000 frames to sample.json
  handy sample.json            # view sample.json
*/


(function() {
  var audio, print, run, save, time, view;

  time = require('./time');

  audio = require('./audio');

  print = console.log;

  save = function(frames, file) {
    'Save a specified number of motion frames as a sample to file.\n  ';
    var WebSocket, fs, i, max, out, ws;

    WebSocket = require('ws');
    ws = new WebSocket('ws://localhost:6437');
    fs = require('fs');
    out = file ? fs.createWriteStream(file) : process.stdout;
    max = parseInt(frames);
    i = 0;
    ws.on('open', function() {
      if (file) {
        print(' leap socket opened');
      }
      ws.send(JSON.stringify({
        enableGestures: true
      }));
      return out.write('[\n');
    });
    ws.on('close', function(code, reason) {
      out.write(']\n');
      if (file) {
        print(' leap socket closed');
        print(" " + ws.bytesReceived + " bytes received");
        print(" " + max + " frames written to " + file);
        time.info(file);
        if (reason) {
          return print(reason);
        }
      }
    });
    ws.on('error', function(err) {
      return print(err);
    });
    return ws.on('message', function(d) {
      if (i === 0) {
        print(" version " + (JSON.parse(d).version));
      } else if (max > i) {
        out.write("" + d + ",\n");
      } else if (max === i) {
        out.write("" + d + "\n");
      } else {
        ws.close();
      }
      return i += 1;
    });
  };

  view = function(file) {
    'View sample file.';    if (!file) {
      return print('Please specify a sample file to view');
    } else {
      print("Timing info for " + file + ":");
      return time.info(file);
    }
  };

  run = function() {
    'Run as a command-line script.\n  ';
    var argv, audioFile, file, fps, frames, handsFile, secs;

    argv = require('optimist').alias('a', 'audio').alias('t', 'time').describe('t', 'Time in seconds to record').describe('a', 'Record and save audio track').argv;
    fps = 90;
    handsFile = 'hands.json';
    audioFile = 'audio.mov';
    if (argv._) {
      file = argv._[0];
      handsFile = file + '.json';
      audioFile = file + '.mov';
    }
    if (argv.time) {
      secs = argv.time;
      frames = secs * fps;
      if (argv.audio) {
        audio.record(secs, audioFile);
      }
      return save(frames, handsFile);
    } else {
      return view(file);
    }
  };

  module.exports = {
    run: run,
    save: save,
    view: view
  };

}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
  var $, i, paused, render;

  $ = function(id) {
    return document.getElementById(id);
  };

  paused = false;

  i = 0;

  render = function(err, data) {
    var canvas, ctx, duration, idle, last, renderInfo, renderPointables, run, step, x, y;

    if (err) {
      return alert(err.statusText);
    } else {
      window.data = data;
      last = data.length - 1;
      duration = (data[last].timestamp - data[0].timestamp) / 1000;
      step = duration / data.length;
      canvas = $('viz');
      canvas.width = 800;
      canvas.height = 800;
      ctx = canvas.getContext("2d");
      x = d3.scale.linear().range([0, canvas.width]).domain([-200, 200]);
      y = d3.scale.linear().range([canvas.height, 0]).domain([0, 400]);
      renderPointables = function(frame) {
        var p, pos, _i, _len, _ref, _results;

        ctx.fillStyle = "rgba(245, 245, 245, 0.3)";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = "#555";
        if (frame.pointables != null) {
          _ref = frame.pointables;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            pos = p.tipPosition;
            _results.push(ctx.fillRect(x(pos[0]), y(pos[1]), 14, 14));
          }
          return _results;
        }
      };
      renderInfo = function(frame) {
        return info.innerHTML = frame.timestamp;
      };
      idle = function() {
        if (paused) {
          return setTimeout(idle, step);
        } else {
          return run();
        }
      };
      run = function() {
        var frame;

        if (paused) {
          return setTimeout(run, step);
        } else {
          if (i === last) {
            i = 0;
          }
          frame = data[i];
          renderPointables(frame);
          renderInfo(frame);
          i++;
          return setTimeout(run, step);
        }
      };
      return run();
    }
  };

  window.pause = function() {
    paused = !paused;
    return $('pause').textContent = paused ? '⊕' : '⊗';
  };

  window.back = function() {
    return i = i > 0 ? i - 30 : 0;
  };

  window.skip = function() {
    return i = (i + 30) < last ? i + 30 : 0;
  };

  window.load = function(file) {
    return d3.json(file, render);
  };

}).call(this);
